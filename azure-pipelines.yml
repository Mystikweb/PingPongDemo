# ASP.NET Core

# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
- master
- develop

pr:
  branches:
    include:
    - master
    - develop

schedules:
- cron: '0 0 * * *'
  displayName: 'Nightly Build'
  branches:
    include:
    - develop

variables:
  buildConfiguration: 'Release'

stages:
- stage: BuildAndTest
  displayName: 'Create PingPong Demo Build with Test Results'
  jobs:
  - job: Build
    displayName: 'Build PingPong Application'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Run PingPong Build'
      inputs:
        command: build
        projects: '**/PingPong.csproj'
        arguments: '--configuration $(buildConfiguration)'
  - job: Test
    displayName: 'Test PingPong Application'
    dependsOn: Build
    steps:
      - task: DotNetCoreCLI@2
        displayName: 'Test PingPong Application'
        inputs:
          command: test
          projects: '**/PingPong.Tests.csproj'
          arguments: '--configuration $(buildConfiguration) --collect "XPlat Code Coverage" --logger trx'
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'XUnit'
          testResultsFiles: '**/*.trx'
          mergeTestResults: true
          buildConfiguration: '$(buildConfiguration)'
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Coverage Results'
        inputs:
          summaryFileLocation: '**/coverage.*.xml'
          codeCoverageTool: 'Cobertura'

- stage: Publish
  displayName: 'Publish PingPong Demo'
  dependsOn: BuildAndTest
  jobs:
  - job: PublishApplication
    displayName: 'Publish PingPong Build'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Create PingPong Package'
      inputs:
        command: publish
        projects: '**/PingPong.csproj'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true
    - task: ArchiveFiles@2
      displayName: 'Add Installer Scripts'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/src/Deployment'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/Deployment-$(Build.BuildId).zip'
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@0
      displayName: 'Publish PingPong Installation Package'
      inputs:
        artifactName: 'PingPongBuild'
        targetPath: '$(Build.ArtifactStagingDirectory)'
